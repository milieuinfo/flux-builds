"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[5093],{"../../node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs":(e,n,a)=>{a.d(n,{f:()=>x});var l=a("../../node_modules/react/index.js"),t=a("../../node_modules/react-dom/client.js"),i=new Map,r=({callback:e,children:n})=>{let a=(0,l.useRef)();return(0,l.useLayoutEffect)(()=>{a.current!==e&&(a.current=e,e())},[e]),n},s=async(e,n)=>{let a=await o(n);return new Promise(n=>{a.render(l.createElement(r,{callback:()=>n(null)},e))})},d=(e,n)=>{let a=i.get(e);a&&(a.unmount(),i.delete(e))},o=async e=>{let n=i.get(e);return n||(n=t.createRoot(e),i.set(e,n)),n},m=a("../../node_modules/@storybook/blocks/dist/index.mjs"),u={code:m.XA,a:m.zE,...m.Sw},c=class extends l.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(e){let{showException:n}=this.props;n(e)}render(){let{hasError:e}=this.state,{children:n}=this.props;return e?null:l.createElement(l.Fragment,null,n)}},x=class{constructor(){this.render=async(e,n,t)=>{let i={...u,...n?.components},r=m.kQ;return new Promise((d,o)=>{a.e(814).then(a.bind(a,"../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/index.js")).then(({MDXProvider:a})=>s(l.createElement(c,{showException:o,key:Math.random()},l.createElement(a,{components:i},l.createElement(r,{context:e,docsParameter:n}))),t)).then(()=>d())})},this.unmount=e=>{d(e)}}}},"../../node_modules/@storybook/addon-docs/dist/index.mjs":(e,n,a)=>{a.d(n,{Hl:()=>l.Hl,W8:()=>l.W8,kL:()=>l.kL,ov:()=>l.ov}),a("../../node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var l=a("../../node_modules/@storybook/blocks/dist/index.mjs")},"../../libs/form/src/next/input-field-masked/stories/vl-input-field-masked.stories.ts":(e,n,a)=>{a.r(n),a.d(n,{InputFieldMaskedDate:()=>V,InputFieldMaskedIban:()=>f,InputFieldMaskedMobile:()=>T,InputFieldMaskedNumerical:()=>E,InputFieldMaskedPhone:()=>w,InputFieldMaskedPhoneInternational:()=>I,InputFieldMaskedPrice:()=>R,InputFieldMaskedRrn:()=>y,InputFieldMaskedUuid:()=>j,__namedExportsOrder:()=>M,default:()=>b});var l=a("../../libs/common/storybook/src/index.ts"),t=a("../../node_modules/lit/index.js"),i=a("../../libs/form/src/next/input-field-masked/vl-input-field-masked.defaults.ts"),r=a("../../libs/form/src/next/input-field/stories/vl-input-field.stories-arg.ts"),s=a("../../libs/form/src/next/input-field-masked/masks.ts");let d={...r.s,...i.e},o={...r.O,mask:{name:"mask",description:"Het mask dat gebruikt moet worden.<br/>Dit attribuut is niet reactief.",control:{type:l.VH.SELECT},options:Object.keys(s.S),table:{type:{summary:(0,l.uf)(Object.keys(s.S))},category:l.R6.ATTRIBUTES,defaultValue:{summary:d.mask}}},maskPrefix:{name:"mask-prefix",description:"Zet de prefix van het mask.<br/>De prefix wordt automatisch toegevoegd aan de value van het input veld indien de value niet begint met de prefix.<br/>Dit attribuut is niet reactief.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:d.maskPrefix}}},rawValue:{name:"raw-value",description:"Geeft de raw value terug bij het submitten van een form.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:d.rawValue}}},disableMaskValidation:{name:"disable-mask-validation",description:"Schakelt de automatische mask validatie uit.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:d.disableMaskValidation}}},regex:{name:"regex",description:"Overschrijft de regex die gebruikt wordt bij de mask validatie.<br/>Bij het testen van de regex wordt altijd de raw value gebruikt.",control:!1,table:{type:{summary:l.QE.REGEX},category:l.R6.PROPERTIES,defaultValue:{summary:d.regex}}}};a("../../node_modules/react/index.js");var m=a("../../node_modules/react/jsx-runtime.js"),u=a("../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),c=a("../../node_modules/@storybook/addon-docs/dist/index.mjs"),x=a("../../libs/form/src/next/form-control/stories/form-control.public-methods-doc.mdx");function p(e){let n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",blockquote:"blockquote",ul:"ul",li:"li"},(0,u.RP)(),e.components),{VluxMetaData:a}=n;return a||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("VluxMetaData",!0),(0,m.jsxs)(m.Fragment,{children:[(0,m.jsx)(n.h1,{id:"input-field-masked---next",children:"Input Field Masked - next"}),"\n",(0,m.jsx)(a,{id:"form-next-input-field-masked"}),"\n",(0,m.jsxs)(n.p,{children:["Gebruik de ",(0,m.jsx)(n.code,{children:"input-field-masked-next"})," component om een input veld met een mask toe te voegen aan een pagina.",(0,m.jsx)("br",{}),"\nZie het ",(0,m.jsx)(n.a,{href:"/docs/ontwerp-form-demo--documentatie",children:"form demo"})," voorbeeld voor het gebruik binnen een form."]}),"\n",(0,m.jsx)(n.h2,{id:"voorbeeld",children:"Voorbeeld"}),"\n",(0,m.jsx)(n.pre,{children:(0,m.jsx)(n.code,{className:"language-js",children:"import { VlInputFieldMaskedComponent } from '@domg-wc/form/next/input-field-masked';\n"})}),"\n",(0,m.jsx)(n.pre,{children:(0,m.jsx)(n.code,{className:"language-html",children:"<vl-input-field-masked-next></vl-input-field-masked-next>\n"})}),"\n",(0,m.jsx)(c.Hl,{of:f}),"\n",(0,m.jsx)(n.h2,{id:"configuratie",children:"Configuratie"}),"\n",(0,m.jsx)(c.ov,{of:f}),"\n",(0,m.jsx)(n.h2,{id:"publieke-methodes",children:"Publieke methodes"}),"\n",(0,m.jsx)(x.A,{}),"\n",(0,m.jsx)(n.h3,{id:"getrawvalue-string",children:"getRawValue(): string"}),"\n",(0,m.jsxs)(n.p,{children:["Geeft de raw value van de input terug (zonder mask).",(0,m.jsx)("br",{}),"\nBij het ",(0,m.jsx)(n.code,{children:"price"})," mask wordt de prefix weggelaten."]}),"\n",(0,m.jsx)(n.h2,{id:"validatie",children:"Validatie"}),"\n",(0,m.jsxs)(n.blockquote,{children:["\n",(0,m.jsxs)(n.p,{children:["Meer info over validatie binnen onze form componenten vind je hier: ",(0,m.jsx)(n.a,{href:"/docs/ontwerp-form-validation--documentatie",children:"Form - Validatie"})]}),"\n"]}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsxs)(n.li,{children:["Er wordt automatisch mask validatie toegevoegd aan het input veld, je kan dit uitschakelen met het ",(0,m.jsx)(n.code,{children:"disable-mask-validation"})," attribuut."]}),"\n",(0,m.jsxs)(n.li,{children:["Bij de mask validatie wordt er gebruik gemaakt van een regex, deze kan je overschrijven met de ",(0,m.jsx)(n.code,{children:"regex"})," property."]}),"\n",(0,m.jsx)(n.li,{children:"Bij het testen van de regex wordt altijd de raw value van het input veld gebruikt."}),"\n",(0,m.jsxs)(n.li,{children:["De ",(0,m.jsx)(n.code,{children:"patternMismatch"})," ValidityState key wordt gebruikt voor de mask validatie error."]}),"\n",(0,m.jsxs)(n.li,{children:["Het is mogelijk om de mask validatie te combineren met andere validaties, bv. ",(0,m.jsx)(n.code,{children:"required"}),", ",(0,m.jsx)(n.code,{children:"min"}),", ",(0,m.jsx)(n.code,{children:"max"}),"."]}),"\n",(0,m.jsxs)(n.li,{children:["We voorzien momenteel enkel validatie voor de ",(0,m.jsx)(n.code,{children:"text"})," input type."]}),"\n"]}),"\n",(0,m.jsx)(n.h2,{id:"masks",children:"Masks"}),"\n",(0,m.jsx)(n.h3,{id:"iban",children:"Iban"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"BE"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"BE00 0000 0000 0000"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[A-Z]{2}[0-9]{14}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:f}),"\n",(0,m.jsx)(n.h3,{id:"rijksregisternummer",children:"Rijksregisternummer"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"00.00.00-000.00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]{11}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:y}),"\n",(0,m.jsx)(n.h3,{id:"uuid",children:"UUID"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel hexadecimale karakters"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9a-fA-F]{32}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:j}),"\n",(0,m.jsx)(n.h3,{id:"date",children:"Date"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"dd.mm.yyyy"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]{8}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:V}),"\n",(0,m.jsx)(n.h3,{id:"numerical",children:"Numerical"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsx)(n.li,{children:"2 decimalen"}),"\n",(0,m.jsxs)(n.li,{children:["Decimaal karakter: ",(0,m.jsx)(n.code,{children:","})]}),"\n",(0,m.jsxs)(n.li,{children:["Duizendtal karakter: ",(0,m.jsx)(n.code,{children:"."})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]+(.[0-9]+)?$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:E}),"\n",(0,m.jsx)(n.h3,{id:"price",children:"Price"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsx)(n.li,{children:"2 decimalen"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"â‚¬"})]}),"\n",(0,m.jsxs)(n.li,{children:["Decimaal karakter: ",(0,m.jsx)(n.code,{children:","})]}),"\n",(0,m.jsxs)(n.li,{children:["Duizendtal karakter: ",(0,m.jsx)(n.code,{children:"."})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]+(.[0-9]+)?$/"})]}),"\n",(0,m.jsx)(n.li,{children:"De prefix wordt weggelaten bij de raw value."}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:R}),"\n",(0,m.jsx)(n.h3,{id:"phone",children:"Phone"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"+32"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"+32 00 00 00 00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^\\+[0-9]{10}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:w}),"\n",(0,m.jsx)(n.h3,{id:"phone-international",children:"Phone international"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]*$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:I}),"\n",(0,m.jsx)(n.h3,{id:"mobile",children:"Mobile"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"+32"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"+32 000 00 00 00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^\\+[0-9]{11}$/"})]}),"\n"]}),"\n",(0,m.jsx)(c.Hl,{of:T}),"\n",(0,m.jsx)(n.h2,{id:"referenties",children:"Referenties"}),"\n",(0,m.jsx)(n.h3,{id:"cleavejs",children:"Cleave.js"}),"\n",(0,m.jsx)(n.p,{children:(0,m.jsx)(n.a,{href:"https://nosir.github.io/cleave.js/",target:"_blank",rel:"nofollow noopener noreferrer",children:"Documentatie Cleave.js"})})]})}var h=a("../../libs/form/src/next/input-field-masked/vl-input-field-masked.component.ts"),v=a("../../libs/common/utilities/src/index.ts"),k=a("../../libs/form/src/next/form-label/index.ts");(0,v.gy)([h.j,k.E]);let b={id:"form-next-input-field-masked",title:"Form-next/input-field-masked",tags:["autodocs"],args:d,argTypes:o,parameters:{controls:{exclude:["pattern","type"]},docs:{page:function(e={}){let{wrapper:n}=Object.assign({},(0,u.RP)(),e.components);return n?(0,m.jsx)(n,Object.assign({},e,{children:(0,m.jsx)(p,e)})):p(e)}}}},g=(0,l._7)(d,({id:e,name:n,label:a,required:l,disabled:i,error:r,success:s,block:d,readonly:o,value:m,placeholder:u,autocomplete:c,minLength:x,maxLength:p,min:h,max:v,minExclusive:k,maxExclusive:b,mask:g,maskPrefix:$,rawValue:f,disableMaskValidation:y,regex:j,onVlChange:V,onVlInput:E,onVlReset:R,onVlValid:w})=>(0,t.qy)`
            <vl-input-field-masked-next
                id=${e}
                name=${n}
                label=${a}
                ?required=${l}
                ?disabled=${i}
                ?error=${r}
                ?success=${s}
                ?block=${d}
                ?readonly=${o}
                value=${m}
                placeholder=${u}
                autocomplete=${c}
                min-length=${x}
                max-length=${p}
                min=${h}
                max=${v}
                min-exclusive=${k}
                max-exclusive=${b}
                mask=${g}
                mask-prefix=${$}
                ?raw-value=${f}
                ?disable-mask-validation=${y}
                .regex=${j}
                @vl-change=${V}
                @vl-input=${E}
                @vl-reset=${R}
                @vl-valid=${w}
            ></vl-input-field-masked-next>
        `),$=e=>n=>(0,t.qy)` <div><vl-form-label-next for="story-input" label=${e} block></vl-form-label-next>${n()}</div> `,f=g.bind({});f.storyName="vl-input-field-masked-next - iban",f.decorators=[$("IBAN")],f.args={id:"story-input",mask:"iban"};let y=g.bind({});y.storyName="vl-input-field-masked-next - rrn",y.decorators=[$("Rijkregisternummer")],y.args={id:"story-input",mask:"rrn"};let j=g.bind({});j.storyName="vl-input-field-masked-next - uuid",j.decorators=[$("UUID")],j.args={id:"story-input",mask:"uuid"};let V=g.bind({});V.storyName="vl-input-field-masked-next - date",V.decorators=[$("Date")],V.args={id:"story-input",mask:"date"};let E=g.bind({});E.storyName="vl-input-field-masked-next - numerical",E.decorators=[$("Numerical")],E.args={id:"story-input",mask:"numerical"};let R=g.bind({});R.storyName="vl-input-field-masked-next - price",R.decorators=[$("Price")],R.args={id:"story-input",mask:"price"};let w=g.bind({});w.storyName="vl-input-field-masked-next - phone",w.decorators=[$("Phone")],w.args={id:"story-input",mask:"phone"};let I=g.bind({});I.storyName="vl-input-field-masked-next - phoneinternational",I.decorators=[$("Phone international")],I.args={id:"story-input",mask:"phoneinternational"};let T=g.bind({});T.storyName="vl-input-field-masked-next - mobile",T.decorators=[$("Mobile")],T.args={id:"story-input",mask:"mobile"},f.parameters={...f.parameters,docs:{...f.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...f.parameters?.docs?.source}}},y.parameters={...y.parameters,docs:{...y.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...y.parameters?.docs?.source}}},j.parameters={...j.parameters,docs:{...j.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...j.parameters?.docs?.source}}},V.parameters={...V.parameters,docs:{...V.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...V.parameters?.docs?.source}}},E.parameters={...E.parameters,docs:{...E.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...E.parameters?.docs?.source}}},R.parameters={...R.parameters,docs:{...R.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...R.parameters?.docs?.source}}},w.parameters={...w.parameters,docs:{...w.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...w.parameters?.docs?.source}}},I.parameters={...I.parameters,docs:{...I.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...I.parameters?.docs?.source}}},T.parameters={...T.parameters,docs:{...T.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlChange,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-change=${onVlChange}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...T.parameters?.docs?.source}}};let M=["InputFieldMaskedIban","InputFieldMaskedRrn","InputFieldMaskedUuid","InputFieldMaskedDate","InputFieldMaskedNumerical","InputFieldMaskedPrice","InputFieldMaskedPhone","InputFieldMaskedPhoneInternational","InputFieldMaskedMobile"]},"../../libs/form/src/next/form-control/stories/form-control.public-methods-doc.mdx":(e,n,a)=>{a.d(n,{A:()=>r}),a("../../node_modules/react/index.js");var l=a("../../node_modules/react/jsx-runtime.js"),t=a("../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js");function i(e){let n=Object.assign({h3:"h3",p:"p",blockquote:"blockquote"},(0,t.RP)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h3,{id:"resetformcontrol",children:"resetFormControl()"}),"\n",(0,l.jsxs)(n.p,{children:["Reset de form control.",(0,l.jsx)("br",{}),"\nDe value van de control wordt teruggezet op de initiÃ«le value. Deze methode wordt ook aangeroepen als de form zelf\ngereset wordt."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Opgelet: het is belangrijk de initiÃ«le waarde in te stellen op de form control vÃ³Ã³r de form control gerenderd wordt.\nAnders wordt een lege value ingesteld als initiÃ«le waarde."}),"\n"]})]})}let r=function(e={}){let{wrapper:n}=Object.assign({},(0,t.RP)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(i,e)})):i(e)}},"../../node_modules/react-dom/client.js":(e,n,a)=>{var l=a("../../node_modules/react-dom/index.js");n.createRoot=l.createRoot,n.hydrateRoot=l.hydrateRoot},"../../libs/form/src/next/form-control/stories/form-control.stories-arg.ts":(e,n,a)=>{a.d(n,{Z:()=>r,x:()=>s});var l=a("../../libs/common/storybook/src/index.ts"),t=a("../../libs/form/src/next/form-control/form-control.defaults.ts"),i=a("../../node_modules/@storybook/addon-actions/dist/index.mjs");let r={...l.D8,...t.i,onVlReset:(0,i.XI)("vl-reset")},s={...(0,l.RN)(!0),id:{name:"id",description:"Het id van het veld.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.id}}},name:{name:"name",description:"De naam van het veld.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.name}}},label:{name:"label",description:"Vult het aria-label attribuut van het veld in.<br/>Kan gebruikt worden als er geen bijhorend label element of vl-form-label component is.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.label}}},required:{name:"required",description:"Duidt aan dat het veld verplicht is.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.required}}},disabled:{name:"disabled",description:"Beeldt de component in een disabled state af.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.disabled}}},error:{name:"error",description:"Beeldt de component in een error state af.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.error}}},success:{name:"success",description:"Beeldt de component in een success state af.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:r.success}}},onVlReset:{name:"vl-reset",description:"Event dat afgevuurd wordt wanneer het veld gereset wordt.",table:{category:l.R6.EVENTS}}}},"../../libs/form/src/next/input-field-masked/masks.ts":(e,n,a)=>{a.d(n,{S:()=>l});let l={iban:{blocks:[4,4,4,4],prefix:"BE",numericOnly:!0,numeralPositiveOnly:!0,regex:/^[A-Z]{2}[0-9]{14}$/},rrn:{blocks:[2,2,2,3,2],delimiters:[".",".","-","."],numericOnly:!0,numeralPositiveOnly:!0,regex:/^[0-9]{11}$/},uuid:{blocks:[8,4,4,4,12],delimiter:"-",regex:/^[0-9a-fA-F]{32}$/,customTransformFn:e=>e.replace(/[^0-9a-fA-F-]/g,"")},date:{date:!0,datePattern:["d","m","Y"],delimiter:".",regex:/^[0-9]{8}$/},numerical:{numeral:!0,numeralDecimalMark:",",delimiter:".",regex:/^[0-9]+(.[0-9]+)?$/},price:{numeral:!0,prefix:"â‚¬",rawValueTrimPrefix:!0,numeralDecimalMark:",",delimiter:".",regex:/^[0-9]+(.[0-9]+)?$/},phone:{blocks:[3,2,2,2,2],prefix:"+32",numericOnly:!0,numeralPositiveOnly:!0,delimiter:" ",regex:/^\+[0-9]{10}$/},phoneinternational:{blocks:[99],numericOnly:!0,numeralPositiveOnly:!0,regex:/^[0-9]*$/},mobile:{blocks:[3,3,2,2,2],prefix:"+32",numericOnly:!0,numeralPositiveOnly:!0,delimiter:" ",regex:/^\+[0-9]{11}$/}}},"../../libs/form/src/next/input-field-masked/vl-input-field-masked.component.ts":(e,n,a)=>{a.d(n,{j:()=>u});var l=a("../../libs/common/utilities/src/index.ts"),t=a("../../node_modules/cleave.js/dist/cleave-esm.js"),i=a("../../libs/form/src/next/input-field/vl-input-field.component.ts"),r=a("../../libs/form/src/next/input-field-masked/masks.ts");let s={key:"patternMismatch",message:"Value does not meet the given mask pattern.",isValid(e,n){let{disableMaskValidation:a,cleaveInstance:l}=e,t=e.regex||e.maskOptions?.regex;if(!n||a||!t||!l)return!0;let i=l.getRawValue();return new RegExp(t).test(i)}},d={attribute:"min",key:"rangeUnderflow",message:e=>e.minExclusive?`Value must be greater than ${e.min}.`:`Value must be greater than or equal to ${e.min}.`,isValid(e,n){let{min:a,minExclusive:l,cleaveInstance:t}=e;if(!n||!a&&0!==a||!t)return!0;let i=t.getRawValue();return!(parseFloat(i)<a)&&(!l||parseFloat(i)!==a)}},o={attribute:"max",key:"rangeOverflow",message:e=>e.maxExclusive?`Value must be lesser than ${e.max}.`:`Value must be lesser than or equal to ${e.max}.`,isValid(e,n){let{max:a,maxExclusive:l,cleaveInstance:t}=e;if(!n||!a&&0!==a||!t)return!0;let i=t.getRawValue();return!(parseFloat(i)>a)&&(!l||parseFloat(i)!==a)}};var m=a("../../libs/form/src/next/input-field-masked/vl-input-field-masked.defaults.ts");class u extends i.Y{static{this.formControlValidators=[...i.Y.formControlValidators,s,d,o]}static get properties(){return{mask:{type:String},maskPrefix:{type:String,attribute:"mask-prefix"},rawValue:{type:Boolean,attribute:"raw-value"},disableMaskValidation:{type:Boolean,attribute:"disable-mask-validation"}}}connectedCallback(){super.connectedCallback(),this.maskOptions={...r.S[this.mask],onValueChanged:e=>{this.handleValueChanged(e?.target?.value)}},this.maskOptions&&(this.maskOptions.numericOnly?this.inputMode="numeric":"date"===this.mask?this.inputMode="decimal":this.inputMode="text",this.maskPrefix&&(this.maskOptions.prefix=this.maskPrefix),this.value.startsWith(this.maskOptions.prefix||"")||(this.value=this.maskOptions.prefix+this.value))}firstUpdated(e){super.firstUpdated(e),this.maskOptions&&(this.cleaveInstance=new t.A(this.validationTarget,this.maskOptions))}resetFormControl(){super.resetFormControl(),this.initialValue.startsWith(this.maskOptions?.prefix||"")?this.value=this.initialValue:this.value=this.maskOptions?.prefix+this.initialValue}getRawValue(){return this.cleaveInstance?.getRawValue()}onInput(){this.dispatchInput=!0}onUpdated(e){if(e.has("value")||e.has("rawValue")){let e=this.rawValue?this.getRawValue()||"":this.value;(this.value===this.maskOptions?.prefix||this.getRawValue()===this.maskOptions?.prefix)&&(e="");let n={value:e};this.setValue(e),this.dispatchEvent(new CustomEvent("vl-change",{composed:!0,bubbles:!0,detail:n})),this.dispatchInput&&(this.dispatchEvent(new CustomEvent("vl-input",{composed:!0,bubbles:!0,detail:n})),this.dispatchInput=!1),this.dispatchEventIfValid(n)}}handleValueChanged(e){let n=this.maskOptions?.customTransformFn,a=n?n(e):e;this.value=a}constructor(...e){super(...e),this.mask=m.e.mask,this.maskPrefix=m.e.maskPrefix,this.rawValue=m.e.rawValue,this.disableMaskValidation=m.e.disableMaskValidation,this.maskOptions=null,this.cleaveInstance=null}}u=function(e,n,a,l){var t,i=arguments.length,r=i<3?n:null===l?l=Object.getOwnPropertyDescriptor(n,a):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,a,l);else for(var s=e.length-1;s>=0;s--)(t=e[s])&&(r=(i<3?t(r):i>3?t(n,a,r):t(n,a))||r);return i>3&&r&&Object.defineProperty(n,a,r),r}([(0,l.M1)("vl-input-field-masked-next")],u)},"../../libs/form/src/next/input-field-masked/vl-input-field-masked.defaults.ts":(e,n,a)=>{a.d(n,{e:()=>l});let l={...a("../../libs/form/src/next/input-field/vl-input-field.defaults.ts").f,mask:"",maskPrefix:"",rawValue:!1,disableMaskValidation:!1}},"../../libs/form/src/next/input-field/stories/vl-input-field.stories-arg.ts":(e,n,a)=>{a.d(n,{O:()=>d,s:()=>s});var l=a("../../libs/common/storybook/src/index.ts"),t=a("../../node_modules/@storybook/addon-actions/dist/index.mjs"),i=a("../../libs/form/src/next/form-control/stories/form-control.stories-arg.ts"),r=a("../../libs/form/src/next/input-field/vl-input-field.defaults.ts");let s={...i.Z,...r.f,onVlChange:(0,t.XI)("vl-change"),onVlInput:(0,t.XI)("vl-input"),onVlValid:(0,t.XI)("vl-valid")},d={...i.x,block:{name:"block",description:"Duidt aan dat de component de volledige breedte van zijn parent mag innemen.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.block}}},readonly:{name:"readonly",description:"Duidt aan dat het veld enkel `readonly` is.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.readonly}}},type:{name:"type",description:"Het type van het input veld.<br>Voor meer informatie over de mogelijke types kan je terecht op [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types).",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.type}}},value:{name:"value",description:"De waarde van het input veld.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.value}}},placeholder:{name:"placeholder",description:"De placeholder van het input veld.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.placeholder}}},autocomplete:{name:"autocomplete",description:"De autocomplete van het veld. Dit moet een waarde zijn die door de browser ondersteund wordt.<br>Een lijst van waarden kan je vinden op [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values).",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.autocomplete}}},minLength:{name:"min-length",description:"Het minimum aantal karakters dat je kan ingeven.",control:{type:l.VH.NUMBER},table:{type:{summary:l.QE.NUMBER},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.minLength}}},maxLength:{name:"max-length",description:"Het maximum aantal karakters dat je kan ingeven.",control:{type:l.VH.NUMBER},table:{type:{summary:l.QE.NUMBER},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.maxLength}}},min:{name:"min",description:"De minimum waarde die je kan ingeven.",control:{type:l.VH.NUMBER},table:{type:{summary:l.QE.NUMBER},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.min}}},max:{name:"max",description:"De maximum waarde die je kan ingeven.",control:{type:l.VH.NUMBER},table:{type:{summary:l.QE.NUMBER},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.max}}},minExclusive:{name:"min-exclusive",description:"Bij het gebruik van het min attribuut moet de waarde hoger zijn dan de min waarde.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.minExclusive}}},maxExclusive:{name:"max-exclusive",description:"Bij het gebruik van het max attribuut moet de waarde lager zijn dan de max waarde.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.maxExclusive}}},pattern:{name:"pattern",description:"Het patroon dat je moet volgen bij het ingeven van een waarde.<br>Dit kan gebruikt worden voor eenvoudige validatie.<br>Gebruik de `regex` property voor complexe validatie.",table:{type:{summary:l.QE.STRING},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.pattern}}},inputGroup:{name:"input-group",description:"Duidt aan dat de component deel is van een input-group.",table:{type:{summary:l.QE.BOOLEAN},category:l.R6.ATTRIBUTES,defaultValue:{summary:s.inputGroup}}},regex:{name:"regex",description:"Het patroon dat je moet volgen bij het ingeven van een waarde.<br>Dit kan gebruikt worden voor complexe validatie.",control:!1,table:{type:{summary:l.QE.REGEX},category:l.R6.PROPERTIES,defaultValue:{summary:s.regex}}},onVlChange:{name:"vl-change",description:"Event dat afgevuurd wordt als de waarde van het input veld verandert (zowel programmatorisch als door een gebruiker).<br>Het detail object van het event bevat de ingegeven waarde.",table:{type:{summary:"{ value: string }"},category:l.R6.EVENTS}},onVlInput:{name:"vl-input",description:"Event dat alleen afgevuurd wordt als de gebruiker de waarde van het input veld verandert.<br>Het detail object van het event bevat de ingegeven waarde.",table:{type:{summary:"{ value: string }"},category:l.R6.EVENTS}},onVlValid:{name:"vl-valid",description:"Event dat afgevuurd wordt als de waarde van het input veld valid is.<br>Het detail object van het event bevat de ingegeven waarde.",table:{type:{summary:"{ value: string }"},category:l.R6.EVENTS}}}}}]);