"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[57],{"./docs/f_ontwerp/form/4_form-data/form-data.stories.ts":(e,n,r)=>{r.r(n),r.d(n,{FormData:()=>c,__namedExportsOrder:()=>h,default:()=>m});var a=r("../../node_modules/lit-html/lit-html.js");r("../../node_modules/react/index.js");var t=r("../../node_modules/react/jsx-runtime.js"),o=r("../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),d=r("../../node_modules/@storybook/blocks/dist/index.mjs");function l(e){let n=Object.assign({h1:"h1",blockquote:"blockquote",p:"p",a:"a",code:"code",h2:"h2",ul:"ul",li:"li",pre:"pre",h3:"h3"},(0,o.RP)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"form---data",children:"Form - Data"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Meer info over validatie binnen onze form componenten vind je hier: ",(0,t.jsx)(n.a,{href:"/docs/ontwerp-form-validation--documentatie",children:"Form - Validatie"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Om de form data te verzamelen, kan je de ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/FormData",target:"_blank",rel:"nofollow noopener noreferrer",children:"FormData"})," API gebruiken."]}),"\n",(0,t.jsxs)(n.p,{children:["Echter, deze API is niet altijd even handig in gebruik. Als je ",(0,t.jsx)(n.code,{children:"FormData.entries()"})," gebruikt, dan krijg je een iterator van de waardes.\nDit is voldoende voor inputs met 1 waarde, maar voor inputs met meerdere waardes krijg je enkel de laatst gekozen waarde terug.\nWanneer je ",(0,t.jsx)(n.code,{children:"FormData.getAll()"})," gebruikt, krijg je dan weer altijd een array van waardes terug, ook voor inputs die maar 1 waarde kunnen bevatten."]}),"\n",(0,t.jsx)(n.p,{children:"Het gebruik is niet intu√Øtief en kan leiden tot verwarring, vooral wanneer je werkt met form controls die meerdere\nwaardes kunnen bevatten, zoals een multiselect."}),"\n",(0,t.jsx)(n.h2,{id:"formaat",children:"formaat"}),"\n",(0,t.jsx)(n.p,{children:"Daarom leek het ons aangewezen dat je altijd met een consistent object werkt voor de form data:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"voor form controls met 1 waarde, krijg je altijd een enkele waarde"}),"\n",(0,t.jsx)(n.li,{children:"voor form controls met meerdere waardes (bv. multiselect), krijg je altijd een array van waardes"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Dan kun je op een vereenvoudigde manier de form data verwerken,\nzonder dat je rekening moet houden met het type van de form control."}),"\n",(0,t.jsx)(n.p,{children:"bv."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'{\n          "naam": "Dehbi",\n          "startDate": "2025-07-11"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"parseformdataformelement",children:"parseFormData(formElement)"}),"\n",(0,t.jsxs)(n.p,{children:["We hebben een helper functie voorzien om de data uit de form te parsen naar een object met de waardes van de velden,\nin het voorgestelde formaat zoals hierboven beschreven. Intern gebruikt deze functie\nde ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/FormData",target:"_blank",rel:"nofollow noopener noreferrer",children:"FormData"})," API en werkt die ook met native form controls."]}),"\n",(0,t.jsx)(n.p,{children:"Deze functie aanvaard 2 parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formElement: Form"}),": het Form element waarvan je de data wil parsen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"multiFormControlNames?: string[]"}),": (optioneel) een array van form control namen die meerdere waardes kunnen bevatten.\nAls deze parameter niet wordt meegegeven, dan zoekt de functie zelf naar form controls die meerdere waardes kunnen\nbevatten (bv. vl-select-rich met ",(0,t.jsx)(n.code,{children:"multiple"})," attribuut...). Deze parameter is in de meeste gevallen niet nodig."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"gebruik",children:"Gebruik"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { parseFormData } from "@domg-wc/components/form";\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<form @submit=${this.onSubmit}>\n  ...\n</form>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"onSubmit(event: Event): void {\n    // voorkomt het standaardgedrag van het formulier,\n    // zodat we de formulierinzending zelf kunnen afhandelen.\n    event.preventDefault();\n\n    // parse de form data\n    const data = parseFormData(event.target as HTMLFormElement);\n    // print de form data in de console\n    console.log(data);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"voorbeeld-resultaat",children:"Voorbeeld resultaat"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'{\n          "naam": "Dehbi",\n          "startDate": "2025-07-11"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setformdataformelement-data",children:"setFormData(formElement, data)"}),"\n",(0,t.jsx)(n.p,{children:"We hebben een helper functie voorzien om de data in te stellen op een form element, zodat je op een eenvoudiger manier\nde waardes van de form controls kan aanpassen. Deze functie is compatibel met al onze vl-form componenten maar ook met\nnative HTML form controls."}),"\n",(0,t.jsx)(n.p,{children:"Deze functie aanvaard 2 parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formElement: Form"}),": het Form element waarvan je de data wil zetten"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data: { [p: string]: FormDataEntryValue[] | File | string }"}),": een object met de waardes van de velden"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"gebruik-1",children:"Gebruik"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { setFormData } from "@domg-wc/components/form";\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<form id="example-form">\n    <input type="text" name="naam" />\n    <select name="hobbies" multiple>\n        <option value="value1">Value 1</option>\n        <option value="value2">Value 2</option>\n        <option value="value3">Value 3</option>\n    </select>\n    <input type="checkbox" name="waarheidsgetrouw" value="spreekt-de-waarheid">\n</form>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const formElement = document.getElementById('example-form') as HTMLFormElement;\n// stel de form data in\nsetFormData(formElement, {\n    naam: 'Dehbi',\n    hobbies: ['Drummen', 'Zwemmen']\n    });\n"})}),"\n",(0,t.jsx)("vl-alert",{type:"info",title:"Ter info",icon:"info-circle",size:"small","custom-css":".vl-alert{margin-bottom: 3rem;}",children:(0,t.jsx)(d.oz,{options:{forceInline:!0},style:{fontSize:"14px"},children:`
 De parameter om form data in te stellen bij setFormData() is hetzelfde formaat als de data die parseFormData()
  functie retourneert.
 `})}),"\n",(0,t.jsx)(n.h3,{id:"checkbox",children:"Checkbox"}),"\n",(0,t.jsxs)(n.p,{children:["De checkbox werkt op een andere manier dan de andere form controls.\nDe value die meegegeven wordt gaat het ",(0,t.jsx)(n.code,{children:"checked"})," attribuut van de checkbox bepalen maar gaat nooit de ",(0,t.jsx)(n.code,{children:"value"})," van de checkbox wijzigen."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Om een checkbox aan te vinken, dien je de value mee te geven die op de checkbox ingesteld staat. Als je de verkeerde string meegeeft wordt niets veranderd."}),"\n",(0,t.jsxs)(n.li,{children:["Om een checkbox uit te vinken kan je de value ",(0,t.jsx)(n.code,{children:"null"})," of ",(0,t.jsx)(n.code,{children:"undefined"})," meegeven."]}),"\n",(0,t.jsxs)(n.li,{children:["Je kan tevens ook ofwel een boolean meegeven, waarbij ",(0,t.jsx)(n.code,{children:"true"})," de checkbox aanvinkt en ",(0,t.jsx)(n.code,{children:"false"})," de checkbox uitvinkt."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Meer info vind je bij de ",(0,t.jsx)(n.a,{href:"?path=/docs/components-form-checkbox--documentatie#formdata",children:"Checkbox Documentatie - FormData"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"voorbeeld",children:"Voorbeeld"}),"\n",(0,t.jsxs)(n.p,{children:["Dit component toont een formulier met verschillende types van form controls. Het formulier kan worden ingevuld met\n",(0,t.jsx)(n.a,{href:"#setformdataformelement-data",children:"setFormData()"})," en de data kan worden opgehaald met\n",(0,t.jsx)(n.a,{href:"#parseformdataformelement",children:"parseFormData()"})," (die wordt dan onderaan de form geprint)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["De data kan worden ingesteld met de ",(0,t.jsx)(n.code,{children:"Stel in"})," knop. (",(0,t.jsx)(n.a,{href:"#setformdataformelement-data",children:"setFormData()"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["De data kan worden opgehaald met de ",(0,t.jsx)(n.code,{children:"Verstuur"})," knop. (",(0,t.jsx)(n.a,{href:"#parseformdataformelement",children:"parseFormData()"}),")"]}),"\n"]}),"\n",(0,t.jsx)(d.Hl,{of:c,sourceState:"none"})]})}var s=r("../../libs/common/src/index.ts"),i=r("../../libs/integrations/src/form/index.ts");(0,s.gy)([i.Ud]);let m={title:"Ontwerp/Form/Form Data",tags:["autodocs"],parameters:{docs:{page:function(e={}){let{wrapper:n}=Object.assign({},(0,o.RP)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(l,e)})):l(e)}}}},c=()=>(0,a.qy)`<vl-form-data></vl-form-data>`;c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:"() => html`<vl-form-data></vl-form-data>`",...c.parameters?.docs?.source}}};let h=["FormData"]}}]);