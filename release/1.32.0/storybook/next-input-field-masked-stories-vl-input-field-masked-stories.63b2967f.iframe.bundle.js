"use strict";(self.webpackChunkuigov_web_components=self.webpackChunkuigov_web_components||[]).push([[7094],{"./libs/form/src/next/input-field-masked/stories/vl-input-field-masked.stories.ts":(e,n,a)=>{a.r(n),a.d(n,{InputFieldMaskedDate:()=>V,InputFieldMaskedIban:()=>g,InputFieldMaskedMobile:()=>I,InputFieldMaskedNumerical:()=>y,InputFieldMaskedPhone:()=>E,InputFieldMaskedPhoneInternational:()=>M,InputFieldMaskedPrice:()=>w,InputFieldMaskedRrn:()=>f,InputFieldMaskedUuid:()=>j,__namedExportsOrder:()=>R,default:()=>v});var l=a("./libs/common/storybook/src/index.ts"),i=a("./node_modules/lit/index.js"),s=a("./libs/form/src/next/input-field-masked/vl-input-field-masked.component.ts"),r=a("./libs/form/src/next/input-field/stories/vl-input-field.stories-arg.ts"),t=a("./libs/form/src/next/input-field-masked/masks.ts");let d={...r.F,...s.R},o={...r.j,mask:{name:"mask",description:"Het mask dat gebruikt moet worden.<br/>Dit attribuut is niet reactief.",control:{type:l.Hy.SELECT},options:Object.keys(t.T),table:{type:{summary:(0,l.G_)(Object.keys(t.T))},category:l.aA.ATTRIBUTES,defaultValue:{summary:d.mask}}},maskPrefix:{name:"mask-prefix",description:"Zet de prefix van het mask.<br/>De prefix wordt automatisch toegevoegd aan de value van het input veld indien de value niet begint met de prefix.<br/>Dit attribuut is niet reactief.",table:{type:{summary:l.vK.STRING},category:l.aA.ATTRIBUTES,defaultValue:{summary:d.maskPrefix}}},rawValue:{name:"raw-value",description:"Geeft de raw value terug bij het submitten van een form.",table:{type:{summary:l.vK.BOOLEAN},category:l.aA.ATTRIBUTES,defaultValue:{summary:d.rawValue}}},disableMaskValidation:{name:"disable-mask-validation",description:"Schakelt de automatische mask validatie uit.",table:{type:{summary:l.vK.BOOLEAN},category:l.aA.ATTRIBUTES,defaultValue:{summary:d.disableMaskValidation}}},regex:{name:"regex",description:"Overschrijft de regex die gebruikt wordt bij de mask validatie.<br/>Bij het testen van de regex wordt altijd de raw value gebruikt.",control:!1,table:{type:{summary:l.vK.REGEX},category:l.aA.PROPERTIES,defaultValue:{summary:d.regex}}}};a("./node_modules/react/index.js");var m=a("./node_modules/react/jsx-runtime.js"),c=a("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),u=a("./node_modules/@storybook/addon-docs/dist/index.mjs"),x=a("./libs/form/src/next/form-control/stories/form-control.public-methods-doc.mdx");function p(e){let n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsx)(n.h1,{id:"input-field-masked---next",children:"Input Field Masked - next"}),"\n",(0,m.jsxs)(n.p,{children:["Gebruik de ",(0,m.jsx)(n.code,{children:"input-field-masked-next"})," component om een input veld met een mask toe te voegen aan een pagina.",(0,m.jsx)("br",{}),"\nZie het ",(0,m.jsx)(n.a,{href:"/docs/ontwerp-form-demo--documentatie",children:"form demo"})," voorbeeld voor het gebruik binnen een form."]}),"\n",(0,m.jsx)(n.h2,{id:"voorbeeld",children:"Voorbeeld"}),"\n",(0,m.jsx)(n.pre,{children:(0,m.jsx)(n.code,{className:"language-js",children:"import { VlInputFieldMaskedComponent } from '@domg-wc/form/next/input-field-masked';\n"})}),"\n",(0,m.jsx)(n.pre,{children:(0,m.jsx)(n.code,{className:"language-html",children:"<vl-input-field-masked-next></vl-input-field-masked-next>\n"})}),"\n",(0,m.jsx)(u.Xz,{of:g}),"\n",(0,m.jsx)(n.h2,{id:"configuratie",children:"Configuratie"}),"\n",(0,m.jsx)(u.Ed,{of:g}),"\n",(0,m.jsx)(n.h2,{id:"publieke-methodes",children:"Publieke methodes"}),"\n",(0,m.jsx)(x.Z,{}),"\n",(0,m.jsx)(n.h3,{id:"getrawvalue-string",children:"getRawValue(): string"}),"\n",(0,m.jsxs)(n.p,{children:["Geeft de raw value van de input terug (zonder mask).",(0,m.jsx)("br",{}),"\nBij het ",(0,m.jsx)(n.code,{children:"price"})," mask wordt de prefix weggelaten."]}),"\n",(0,m.jsx)(n.h2,{id:"validatie",children:"Validatie"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsxs)(n.li,{children:["Er wordt automatisch mask validatie toegevoegd aan het input veld, je kan dit uitschakelen met het ",(0,m.jsx)(n.code,{children:"disable-mask-validation"})," attribuut."]}),"\n",(0,m.jsxs)(n.li,{children:["Bij de mask validatie wordt er gebruik gemaakt van een regex, deze kan je overschrijven met de ",(0,m.jsx)(n.code,{children:"regex"})," property."]}),"\n",(0,m.jsx)(n.li,{children:"Bij het testen van de regex wordt altijd de raw value van het input veld gebruikt."}),"\n",(0,m.jsxs)(n.li,{children:["De ",(0,m.jsx)(n.code,{children:"patternMismatch"})," ValidityState key wordt gebruikt voor de mask validatie error."]}),"\n",(0,m.jsxs)(n.li,{children:["Het is mogelijk om de mask validatie te combineren met andere validaties, bv. ",(0,m.jsx)(n.code,{children:"required"}),", ",(0,m.jsx)(n.code,{children:"min"}),", ",(0,m.jsx)(n.code,{children:"max"}),"."]}),"\n"]}),"\n",(0,m.jsx)(n.h2,{id:"masks",children:"Masks"}),"\n",(0,m.jsx)(n.h3,{id:"iban",children:"Iban"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"BE"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"BE00 0000 0000 0000"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[A-Z]{2}[0-9]{14}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:g}),"\n",(0,m.jsx)(n.h3,{id:"rijksregisternummer",children:"Rijksregisternummer"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"00.00.00-000.00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]{11}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:f}),"\n",(0,m.jsx)(n.h3,{id:"uuid",children:"UUID"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel hexadecimale karakters"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9a-fA-F]{32}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:j}),"\n",(0,m.jsx)(n.h3,{id:"date",children:"Date"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"dd.mm.yyyy"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]{8}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:V}),"\n",(0,m.jsx)(n.h3,{id:"numerical",children:"Numerical"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsx)(n.li,{children:"2 decimalen"}),"\n",(0,m.jsxs)(n.li,{children:["Decimaal karakter: ",(0,m.jsx)(n.code,{children:","})]}),"\n",(0,m.jsxs)(n.li,{children:["Duizendtal karakter: ",(0,m.jsx)(n.code,{children:"."})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]+(.[0-9]+)?$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:y}),"\n",(0,m.jsx)(n.h3,{id:"price",children:"Price"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsx)(n.li,{children:"2 decimalen"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"â‚¬"})]}),"\n",(0,m.jsxs)(n.li,{children:["Decimaal karakter: ",(0,m.jsx)(n.code,{children:","})]}),"\n",(0,m.jsxs)(n.li,{children:["Duizendtal karakter: ",(0,m.jsx)(n.code,{children:"."})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]+(.[0-9]+)?$/"})]}),"\n",(0,m.jsx)(n.li,{children:"De prefix wordt weggelaten bij de raw value."}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:w}),"\n",(0,m.jsx)(n.h3,{id:"phone",children:"Phone"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"+32"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"+32 00 00 00 00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^\\+[0-9]{10}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:E}),"\n",(0,m.jsx)(n.h3,{id:"phone-international",children:"Phone international"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^[0-9]*$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:M}),"\n",(0,m.jsx)(n.h3,{id:"mobile",children:"Mobile"}),"\n",(0,m.jsxs)(n.ul,{children:["\n",(0,m.jsx)(n.li,{children:"Enkel nummers"}),"\n",(0,m.jsxs)(n.li,{children:["Prefix: ",(0,m.jsx)(n.code,{children:"+32"})]}),"\n",(0,m.jsxs)(n.li,{children:["Formaat: ",(0,m.jsx)(n.code,{children:"+32 000 00 00 00"})]}),"\n",(0,m.jsxs)(n.li,{children:["Regex: ",(0,m.jsx)(n.code,{children:"/^\\+[0-9]{11}$/"})]}),"\n"]}),"\n",(0,m.jsx)(u.Xz,{of:I}),"\n",(0,m.jsx)(n.h2,{id:"referenties",children:"Referenties"}),"\n",(0,m.jsx)(n.h3,{id:"cleavejs",children:"Cleave.js"}),"\n",(0,m.jsx)(n.p,{children:(0,m.jsx)(n.a,{href:"https://nosir.github.io/cleave.js/",target:"_blank",rel:"nofollow noopener noreferrer",children:"Documentatie Cleave.js"})})]})}var h=a("./libs/common/utilities/src/index.ts"),k=a("./libs/form/src/next/form-label/index.ts");(0,h.YV)([s.X,k.i]);let v={title:"Form-next/input-field-masked",tags:["autodocs"],args:d,argTypes:o,parameters:{controls:{exclude:["pattern","type"]},docs:{page:function(e={}){let{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,m.jsx)(n,Object.assign({},e,{children:(0,m.jsx)(p,e)})):p(e)}}}},$=(0,l.yg)(d,({id:e,name:n,label:a,required:l,disabled:s,error:r,success:t,block:d,readonly:o,value:m,placeholder:c,autocomplete:u,minLength:x,maxLength:p,min:h,max:k,minExclusive:v,maxExclusive:$,mask:b,maskPrefix:g,rawValue:f,disableMaskValidation:j,regex:V,onVlInput:y,onVlReset:w,onVlValid:E})=>(0,i.dy)`
            <vl-input-field-masked-next
                id=${e}
                name=${n}
                label=${a}
                ?required=${l}
                ?disabled=${s}
                ?error=${r}
                ?success=${t}
                ?block=${d}
                ?readonly=${o}
                value=${m}
                placeholder=${c}
                autocomplete=${u}
                min-length=${x}
                max-length=${p}
                min=${h}
                max=${k}
                min-exclusive=${v}
                max-exclusive=${$}
                mask=${b}
                mask-prefix=${g}
                ?raw-value=${f}
                ?disable-mask-validation=${j}
                .regex=${V}
                @vl-input=${y}
                @vl-reset=${w}
                @vl-valid=${E}
            ></vl-input-field-masked-next>
        `),b=e=>n=>(0,i.dy)` <div><vl-form-label-next for="story-input" label=${e} block></vl-form-label-next>${n()}</div> `,g=$.bind({});g.storyName="vl-input-field-masked-next - iban",g.decorators=[b("IBAN")],g.args={id:"story-input",mask:"iban"};let f=$.bind({});f.storyName="vl-input-field-masked-next - rrn",f.decorators=[b("Rijkregisternummer")],f.args={id:"story-input",mask:"rrn"};let j=$.bind({});j.storyName="vl-input-field-masked-next - uuid",j.decorators=[b("UUID")],j.args={id:"story-input",mask:"uuid"};let V=$.bind({});V.storyName="vl-input-field-masked-next - date",V.decorators=[b("Date")],V.args={id:"story-input",mask:"date"};let y=$.bind({});y.storyName="vl-input-field-masked-next - numerical",y.decorators=[b("Numerical")],y.args={id:"story-input",mask:"numerical"};let w=$.bind({});w.storyName="vl-input-field-masked-next - price",w.decorators=[b("Price")],w.args={id:"story-input",mask:"price"};let E=$.bind({});E.storyName="vl-input-field-masked-next - phone",E.decorators=[b("Phone")],E.args={id:"story-input",mask:"phone"};let M=$.bind({});M.storyName="vl-input-field-masked-next - phoneinternational",M.decorators=[b("Phone international")],M.args={id:"story-input",mask:"phoneinternational"};let I=$.bind({});I.storyName="vl-input-field-masked-next - mobile",I.decorators=[b("Mobile")],I.args={id:"story-input",mask:"mobile"},g.parameters={...g.parameters,docs:{...g.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...g.parameters?.docs?.source}}},f.parameters={...f.parameters,docs:{...f.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...f.parameters?.docs?.source}}},j.parameters={...j.parameters,docs:{...j.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...j.parameters?.docs?.source}}},V.parameters={...V.parameters,docs:{...V.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...V.parameters?.docs?.source}}},y.parameters={...y.parameters,docs:{...y.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...y.parameters?.docs?.source}}},w.parameters={...w.parameters,docs:{...w.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...w.parameters?.docs?.source}}},E.parameters={...E.parameters,docs:{...E.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...E.parameters?.docs?.source}}},M.parameters={...M.parameters,docs:{...M.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...M.parameters?.docs?.source}}},I.parameters={...I.parameters,docs:{...I.parameters?.docs,source:{originalSource:"story(inputFieldMaskedArgs, ({\n  id,\n  name,\n  label,\n  required,\n  disabled,\n  error,\n  success,\n  block,\n  readonly,\n  value,\n  placeholder,\n  autocomplete,\n  minLength,\n  maxLength,\n  min,\n  max,\n  minExclusive,\n  maxExclusive,\n  mask,\n  maskPrefix,\n  rawValue,\n  disableMaskValidation,\n  regex,\n  onVlInput,\n  onVlReset,\n  onVlValid\n}) => {\n  return html`\n            <vl-input-field-masked-next\n                id=${id}\n                name=${name}\n                label=${label}\n                ?required=${required}\n                ?disabled=${disabled}\n                ?error=${error}\n                ?success=${success}\n                ?block=${block}\n                ?readonly=${readonly}\n                value=${value}\n                placeholder=${placeholder}\n                autocomplete=${autocomplete}\n                min-length=${minLength}\n                max-length=${maxLength}\n                min=${min}\n                max=${max}\n                min-exclusive=${minExclusive}\n                max-exclusive=${maxExclusive}\n                mask=${mask}\n                mask-prefix=${maskPrefix}\n                ?raw-value=${rawValue}\n                ?disable-mask-validation=${disableMaskValidation}\n                .regex=${regex}\n                @vl-input=${onVlInput}\n                @vl-reset=${onVlReset}\n                @vl-valid=${onVlValid}\n            ></vl-input-field-masked-next>\n        `;\n})",...I.parameters?.docs?.source}}};let R=["InputFieldMaskedIban","InputFieldMaskedRrn","InputFieldMaskedUuid","InputFieldMaskedDate","InputFieldMaskedNumerical","InputFieldMaskedPrice","InputFieldMaskedPhone","InputFieldMaskedPhoneInternational","InputFieldMaskedMobile"]},"./libs/form/src/next/form-label/index.ts":(e,n,a)=>{a.d(n,{i:()=>l.i});var l=a("./libs/form/src/next/form-label/vl-form-label.component.ts")},"./libs/form/src/next/form-label/vl-form-label.component.ts":(e,n,a)=>{a.d(n,{i:()=>o,n:()=>d});var l=a("./libs/common/utilities/src/index.ts"),i=a("./node_modules/@domg/govflanders-style/common/index.js"),s=a("./node_modules/@domg/govflanders-style/component/index.js"),r=a("./node_modules/lit/index.js"),t=a("./node_modules/lit/directives/class-map.js");let d={for:"",label:"",block:!1,light:!1};class o extends l.fS{static get styles(){return[i.YN,s.J8]}static get properties(){return{for:{type:String},label:{type:String},block:{type:Boolean},light:{type:Boolean}}}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.focusFormControl)}updated(e){super.updated(e);let n=this.getFormControl();n?.setAttribute("label",this.label)}disconnectedCallback(){super.disconnectedCallback();let e=this.getFormControl();e?.removeAttribute("label"),this.removeEventListener("click",this.focusFormControl)}render(){let e={"vl-form__label":!0,"vl-form__label--block":this.block,"vl-form__label--light":this.light};return(0,r.dy)`<label for=${this.for} class=${(0,t.$)(e)}>${this.label}</label>`}getFormControl(){let e=this.closest("form");return e?.querySelector(`[id="${this.for}"]`)}focusFormControl(){let e=this.getFormControl();e?.focus()}constructor(...e){super(...e),this.for=d.for,this.label=d.label,this.block=d.block,this.light=d.light}}o=function(e,n,a,l){var i,s=arguments.length,r=s<3?n:null===l?l=Object.getOwnPropertyDescriptor(n,a):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,a,l);else for(var t=e.length-1;t>=0;t--)(i=e[t])&&(r=(s<3?i(r):s>3?i(n,a,r):i(n,a))||r);return s>3&&r&&Object.defineProperty(n,a,r),r}([(0,l.a6)("vl-form-label-next")],o)},"./libs/form/src/next/input-field-masked/masks.ts":(e,n,a)=>{a.d(n,{T:()=>l});let l={iban:{blocks:[4,4,4,4],prefix:"BE",numericOnly:!0,numeralPositiveOnly:!0,regex:/^[A-Z]{2}[0-9]{14}$/},rrn:{blocks:[2,2,2,3,2],delimiters:[".",".","-","."],numericOnly:!0,numeralPositiveOnly:!0,regex:/^[0-9]{11}$/},uuid:{blocks:[8,4,4,4,12],delimiter:"-",regex:/^[0-9a-fA-F]{32}$/,customTransformFn:e=>e.replace(/[^0-9a-fA-F-]/g,"")},date:{date:!0,datePattern:["d","m","Y"],delimiter:".",regex:/^[0-9]{8}$/},numerical:{numeral:!0,numeralDecimalMark:",",delimiter:".",regex:/^[0-9]+(.[0-9]+)?$/},price:{numeral:!0,prefix:"â‚¬",rawValueTrimPrefix:!0,numeralDecimalMark:",",delimiter:".",regex:/^[0-9]+(.[0-9]+)?$/},phone:{blocks:[3,2,2,2,2],prefix:"+32",numericOnly:!0,numeralPositiveOnly:!0,delimiter:" ",regex:/^\+[0-9]{10}$/},phoneinternational:{blocks:[99],numericOnly:!0,numeralPositiveOnly:!0,regex:/^[0-9]*$/},mobile:{blocks:[3,3,2,2,2],prefix:"+32",numericOnly:!0,numeralPositiveOnly:!0,delimiter:" ",regex:/^\+[0-9]{11}$/}}},"./libs/form/src/next/input-field-masked/vl-input-field-masked.component.ts":(e,n,a)=>{a.d(n,{X:()=>c,R:()=>m});var l=a("./node_modules/cleave.js/dist/cleave-esm.js"),i=a("./libs/form/src/next/input-field-masked/masks.ts"),s=a("./libs/form/src/next/input-field/vl-input-field.component.ts"),r=a("./libs/common/utilities/src/index.ts");let t={key:"patternMismatch",message:"Value does not meet the given mask pattern.",isValid(e,n){let{disableMaskValidation:a,cleaveInstance:l}=e,i=e.regex||e.maskOptions?.regex;if(!n||a||!i||!l)return!0;let s=l.getRawValue();return new RegExp(i).test(s)}},d={attribute:"min",key:"rangeUnderflow",message:e=>e.minExclusive?`Value must be greater than ${e.min}.`:`Value must be greater than or equal to ${e.min}.`,isValid(e,n){let{min:a,minExclusive:l,cleaveInstance:i}=e;if(!n||!a&&0!==a||!i)return!0;let s=i.getRawValue();return!(parseFloat(s)<a)&&(!l||parseFloat(s)!==a)}},o={attribute:"max",key:"rangeOverflow",message:e=>e.maxExclusive?`Value must be lesser than ${e.max}.`:`Value must be lesser than or equal to ${e.max}.`,isValid(e,n){let{max:a,maxExclusive:l,cleaveInstance:i}=e;if(!n||!a&&0!==a||!i)return!0;let s=i.getRawValue();return!(parseFloat(s)>a)&&(!l||parseFloat(s)!==a)}},m={...s.E,mask:"",maskPrefix:"",rawValue:!1,disableMaskValidation:!1};class c extends s.z{static{this.formControlValidators=[...s.z.formControlValidators,t,d,o]}static get properties(){return{mask:{type:String},maskPrefix:{type:String,attribute:"mask-prefix"},rawValue:{type:Boolean,attribute:"raw-value"},disableMaskValidation:{type:Boolean,attribute:"disable-mask-validation"}}}connectedCallback(){super.connectedCallback(),this.maskOptions={...i.T[this.mask],onValueChanged:e=>{this.handleValueChanged(e?.target?.value)}},this.maskOptions&&(this.maskPrefix&&(this.maskOptions.prefix=this.maskPrefix),this.value.startsWith(this.maskOptions.prefix||"")||(this.value=this.maskOptions.prefix+this.value))}firstUpdated(e){super.firstUpdated(e),this.maskOptions&&(this.cleaveInstance=new l.Z(this.validationTarget,this.maskOptions))}resetFormControl(){super.resetFormControl(),this.initialValue.startsWith(this.maskOptions?.prefix||"")?this.value=this.initialValue:this.value=this.maskOptions?.prefix+this.initialValue}getRawValue(){return this.cleaveInstance?.getRawValue()}onInput(){}onUpdated(e){if(e.has("value")||e.has("rawValue")){let e=this.rawValue?this.getRawValue()||"":this.value;(this.value===this.maskOptions?.prefix||this.getRawValue()===this.maskOptions?.prefix)&&(e="");let n={value:e};this.setValue(e),this.dispatchEvent(new CustomEvent("vl-input",{composed:!0,bubbles:!0,detail:n})),this.dispatchEventIfValid(n)}}handleValueChanged(e){let n=this.maskOptions?.customTransformFn,a=n?n(e):e;this.value=a}constructor(...e){super(...e),this.mask=m.mask,this.maskPrefix=m.maskPrefix,this.rawValue=m.rawValue,this.disableMaskValidation=m.disableMaskValidation,this.maskOptions=null,this.cleaveInstance=null}}c=function(e,n,a,l){var i,s=arguments.length,r=s<3?n:null===l?l=Object.getOwnPropertyDescriptor(n,a):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,a,l);else for(var t=e.length-1;t>=0;t--)(i=e[t])&&(r=(s<3?i(r):s>3?i(n,a,r):i(n,a))||r);return s>3&&r&&Object.defineProperty(n,a,r),r}([(0,r.a6)("vl-input-field-masked-next")],c)}}]);